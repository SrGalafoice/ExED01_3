package controller;
import java.util.Collections;
import java.util.LinkedList;

public class Ex1 {

    private int tamanho = 26;
    private LinkedList<String>[] nomes;
    private int nomesC;

    public Ex1() {
        nomes = new LinkedList[tamanho];

        Lista();
    }

    public void Lista() {
        for (int i = 0; i < tamanho; i++)
            nomes[i] = new LinkedList<>();
    }

    public int indice(String nome) {
        final int A = 97;
        int valorletra = nome.toLowerCase().charAt(0);

        return valorletra - A;
    }

    public void adicionar(String nome) {
        String nomeFormatado = primeiraLetraMaiuscula(nome);
        int indice = indice(nomeFormatado);
        nomes[indice].add(nomeFormatado);

        ordenarLinkedList(indice);

        nomesC++;
    }

    public static String primeiraLetraMaiuscula(String palavra) {
        if (palavra == null || palavra.isEmpty()) return palavra;

        char primeiraLetra = Character.toUpperCase(palavra.charAt(0));
        String restante = palavra.substring(1).toLowerCase();

        return primeiraLetra + restante;
    }

    public void ordenarLinkedList(int indice) {
        Collections.sort(nomes[indice]);
    }

    public boolean contemNome(String nome) {
        String nomeFormatado = primeiraLetraMaiuscula(nome);
        int indice = indice(nomeFormatado);

        return nomes[indice].contains(nomeFormatado);
    }

    public boolean removerNome(String nome) {
        String nomeF = primeiraLetraMaiuscula(nome);
        int indice = indice(nomeF);

        boolean removeu = nomes[indice].remove(nomeF);

        if (removeu) nomesC--;
        return removeu;
    }

    public boolean renomear(String nomeA, String nomeN) {
        String nomeAntigoFormatado = primeiraLetraMaiuscula(nomeA);
        if (!contemNome(nomeAntigoFormatado)) return false;

        removerNome(nomeAntigoFormatado);
        adicionar(nomeN);
        return true;
    }

    public boolean Vazia() {
        return nomesC == 0;
    }

    public int mostrarqntnome() {
        return nomesC;
    }

    public void exibir() {
        for (int i = 0; i < nomes.length; i++) {
            if (!nomes[i].isEmpty()) {
                System.out.print((char) ('A' + i) + " ---> " + nomes[i]);
                System.out.println();
            }
        }
    }
}
